version: '3'
services:
{% if zookeeper %}
  zookeeper:
    image: zookeeper:{{ zookeeper_version }}
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - {{ data_path }}/data/zookeeper/data:/datalog
      - {{ data_path }}/data/zookeeper/log:/data
{% endif %}
{% if kafka %}
  kafka:
    image: wurstmeister/kafka:{{ kafka_version }}
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: "kafka"
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 10
      KAFKA_OFFSETS_RETENTION_MINUTES: 20160
      KAFKA_HEAP_OPTS: "-Xmx256M -Xms256M"
      KAFKA_LOG_DIRS: /kafka/log
{% if zookeeper %}
    depends_on:
      - zookeeper
{% endif %}
    volumes:
      - {{ data_path }}/data/kafka/data:/kafka
      - {{ data_path }}/data/kafka/log:/opt/kafka/log
      - /var/run/docker.sock:/var/run/docker.sock
{% endif %}
{% if mongo %}
  mongodb:
    image: mongo:{{ mongo_version }}
    container_name: mongo
    hostname: mongo
    command: mongod --replSet rs0
    ports:
      - "27017:27017"
    volumes:
      - ./mongo/initRS.js:/docker-entrypoint-initdb.d/initRS.js
      - {{ data_path }}/data/mongo/configdb:/data/configdb
      - {{ data_path }}/data/mongo/db:/data/db
{% elif postgres %}
  postgres:
    image: postgres:{{ postgres_version }}
    container_name: postgres
    hostname: postgres
    environment:
      - POSTGRES_USER=nxadmin
      - POSTGRES_PASSWORD=nuxeo
    command: ["-c", "shared_buffers=256MB", "-c", "effective_cache_size=1GB", "-c", "work_mem=10MB", "-c", "wal_buffers=16MB", "-c", "full_page_writes=off"]
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
      - {{ data_path }}/data/postgres/data:/var/lib/postgresql/data
{% endif %}
{% if elastic %}
  elasticsearch:
    image: {{ elastic_image }}
    container_name: elastic
    hostname: elastic
    ports:
      - "9200:9200"
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms384m -Xmx384m
{% if elastic5 %}
      xpack.security.enabled: "false"
{% endif %}
    volumes:
      - esdata:/usr/share/elasticsearch/data
{% if kibana %}
  kibana:
    image: docker.elastic.co/kibana/{{ kibana_version }}
    container_name: kibana
    hostname: kibana
    ports:
      - "5601:5601"
    environment:
      SERVER_NAME: kibana
      ELASTICSEARCH_URL: http://elasticsearch:9200
    depends_on:
      - elasticsearch
{% endif %}
{% endif %}
{% if graphite %}
  graphite:
    build: graphite
    image: mygraphite:latest
    container_name: graphite
    hostname: graphite
    user: root
    ports:
      - "8000:80"
      - "2003:2003"
    volumes:
      - {{ data_path }}/data/graphite:/opt/graphite/storage/whisper
{% endif %}
{% if grafana %}
  grafana:
    image: grafana/grafana
    container_name: grafana
    hostname: grafana
    user: root
    ports:
      - "3000:3000"
    links:
      - graphite
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - {{ data_path }}/data/grafana:/var/lib/grafana
{% endif %}
{% if (kafkahq and kafka) %}
  kafkahq:
    image: tchiotludo/kafkahq
    container_name: kafkahq
    hostname: kafkahq
    ports:
      - "3080:8080"
    depends_on:
      - kafka
    volumes:
      - ./kafkahq/kafkahq.conf:/app/application.conf
{% endif %}
{% if nuxeo %}
  nuxeo:
    image: nuxeo:{{ nuxeo_version }}
    container_name: nuxeo
    hostname: nuxeo
    environment:
      JAVA_OPTS: -Xdebug -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n
{% if redis %}
      NUXEO_REDIS_HOST: redis
{% endif %}
    depends_on:
{% if kafka %}
      - kafka
{% endif %}
{% if elastic %}
      - elasticsearch
{% endif %}
{% if mongo %}
      - mongodb
{% elif postgres %}
      - postgres
{% endif %}
{% if redis %}
      - redis
{% endif %}
    ports:
      - "8080:8080"
      - "8787:8787"
    volumes:
      - ./nuxeo/nuxeo.conf:/docker-entrypoint-initnuxeo.d/nuxeo.conf
      - ./nuxeo/init-nuxeo.sh:/docker-entrypoint-initnuxeo.d/init-nuxeo.sh
      - {{ data_path }}/data/nuxeo:/var/lib/nuxeo/data
{% endif %}
{% if (nuxeo and stream and kafka) %}
  stream:
    image: nuxeo:{{ nuxeo_version }}
    container_name: stream
    hostname: stream
    depends_on:
      - "nuxeo"
    command: /wait-for-nuxeo.sh /opt/nuxeo/server/bin/stream.sh monitor -k --codec avro -l ALL -i 30 --host graphite --port 2003
    volumes:
      - ./nuxeo/nuxeo.conf:/docker-entrypoint-initnuxeo.d/nuxeo.conf
      - ./stream/docker-entrypoint.sh:/docker-entrypoint.sh
      - ./stream/wait-for-nuxeo.sh:/wait-for-nuxeo.sh
{% endif %}
{% if redis %}
  redis:
    image: redis:{{ redis_version }}
    container_name: redis
    hostname: redis
    volumes:
      - {{ data_path }}/data/redis:/data
{% endif %}
{% if netdata %}
  netdata:
    image: netdata/netdata
    hostname: netdata
    ports:
      - 19999:19999
    environment:
      # must match grep docker /etc/group | cut -d ':' -f 3
      PGID: 999
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
{% endif %}
{% if elastic %}
volumes:
  esdata:
    driver_opts:
      type: none
      device: {{ data_path }}/data/elastic
      o: bind
{% endif %}
